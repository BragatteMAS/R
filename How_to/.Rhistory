lapply(packs, require, character.only = TRUE)
x <-  torch_tensor(0, requires_grad = TRUE)
x$grad
f <- function(x) x * (x - 1)
plot(f)
torch_tensor
x <-  torch_tensor(0, requires_grad = TRUE)
packs = c("torch")
lapply(packs, install.packages, character.only = TRUE)
lapply(packs, require, character.only = TRUE)
x <- torch_tensor(0, requires_grad = TRUE)
torch_tensor
f <- function(x)
x * (x - 1)
plot(f)
torch_tensor
x <- torch_tensor(0, requires_grad = TRUE)
x$grad
f <- function(x)
x * (x - 1)
plot(f)
#where X & cost derivate from X
x <- torch_tensor(0, requires_grad = TRUE)
x$grad
optim <- optim_adam(x) #improve formulas
optim <- optim_adam(x) #improve formulas
fx <- f(x) #calc f(x)
fx$backward() #backpropagation - f direction calc derivative
x$grad
optim$step()
x
optim$step()
x
points(x, fx, col = "red")
for(pass in 2:100) {
optim$zero_grad()
fx <- f(x)
fx$backward()
optim$step()
points(x, fx, col = "red")
Sys.sleep(0.1)
for(pass in 2:100) {
optim$zero_grad()
fx <- f(x)
fx$backward()
optim$step()
points(x, fx, col = "red")
Sys.sleep(0.1)
optim <- optim_adam(x, lr=0.01) #improve formulas
for (pass in 2:100) {
optim$zero_grad()
fx <- f(x)
fx$backward()
optim$step()
points(x, fx, col = "red")
Sys.sleep(0.1)
}
packs = c("torch")
lapply(packs, install.packages, character.only = TRUE)
lapply(packs, require, character.only = TRUE)
f <- function(x)
x * (x - 1)
plot(f)
#Aim: Find X who reduce F
#Tensor == matriz (multi)
#Torch do Autograd
#x, df/dx
#where X & cost derivate from X
x <- torch_tensor(0, requires_grad = TRUE)
x$grad
#gradient_descend
#x[t+1] = x[t] - a * df/dx[t]
optim <- optim_adam(x, lr = 0.01) #improve formulas
fx <- f(x) #calc f(x)
fx$backward() #backpropagation - f direction calc derivative
x$grad
optim$step()
x
points(x, fx, col = "red")
for (pass in 2:100) {
optim$zero_grad()
fx <- f(x)
fx$backward()
optim$step()
points(x, fx, col = "red")
Sys.sleep(0.1)
}
##segundo método resumo dos dados
summary(x2)
library(corrplot)
#How_to_ChiSquare - Disfuncao_Eretil created by Bragatte  202102062017
#chamar arquivo
disf_eret <- read_delim("Downloads/bd_pre_pos.csv", ";")
disf_eret_nopac <- read_delim("Downloads/bd_pre_pos2.csv", ";")
View(disf_eret)
#Criar variável para comparar duas colunas de interesse
x2 = table(disf_eret$Grupo, disf_eret$IIEF_grav_2)
x2
#Qui-quadrado
chisq.test(x2)
#valor p direto do qui-quadraro
chisq.test(x2)$p.value
##segundo método resumo dos dados
summary(x2)-----------------------------library(corrplot)
bd_pre_pos <- read.csv("~/Downloads/bd_pre_pos.csv", sep=";")
View(bd_pre_pos)
bd_pre_pos_nopac <- read.csv("~/Downloads/bd_pre_pos_nopac.csv")
View(bd_pre_pos_nopac)
#How_to_ChiSquare - Disfuncao_Eretil created by Bragatte  202102062017
#chamar arquivo
disf_eret <- read_delim("Downloads/bd_pre_pos.csv", ";")
disf_eret_nopac <- read_delim("Downloads/bd_pre_pos2.csv", ";")
View(disf_eret)
#Criar variável para comparar duas colunas de interesse
x2 = table(disf_eret$Grupo, disf_eret$IIEF_grav_2)
x2
#Qui-quadrado
chisq.test(x2)
#valor p direto do qui-quadraro
chisq.test(x2)$p.value
##segundo método resumo dos dados
summary(x2)
###
library(corrplot)
x2 = table(disf_eret$Grupo, disf_eret$IIEF_grav_2)
disf_eret <- read_delim("Downloads/bd_pre_pos.csv", ";")
disf_eret <- read_delim("bd_pre_pos.csv", ";")
disf_eret <- read.table("bd_pre_pos.csv", ";")
disf_eret <- read.table("bd_pre_pos", ";")
disf_eret <- read.table("bd_pre_pos", ";")
disf_eret_nopac <- read_delim("bd_pre_pos2", ";")
disf_eret <- read.csv("bd_pre_pos", ";")
View(disf_eret)
disf_eret <- read.delim("bd_pre_pos", ";")
disf_eret <- read.csv('bd_pre_pos', ';')
disf_eret <- read.csv(file.name <- choose.files(),na.strings="NA",header=T,sep=";",)
disf_eret_nopac <- read_delim("bd_pre_pos2", ";")
disf_eret_nopac <- read_delim("~/Downloads/bd_pre_pos_nopac.csv", ";")
disf_eret_nopac <- read.csv("~/Downloads/bd_pre_pos_nopac.csv", ";")
disf_eret_nopac <- read.csv("~/Downloads/bd_pre_pos_nopac.csv", ";", header = T)
View(disf_eret_nopac)
disf_eret_nopac <- read.csv("~/Downloads/bd_pre_pos_nopac.csv", sep = ";", header = T)
View(disf_eret_nopac)
disf_eret_nopac <- read.csv("~/Downloads/bd_pre_pos_nopac.csv", sep = ",", header = T)
View(disf_eret_nopac)
disf_eret <- read.csv("~/Downloads/bd_pre_pos.csv", sep = ",", header = T)
#How_to_ChiSquare - Disfuncao_Eretil created by Bragatte  202102062017
#chamar arquivo
disf_eret <-
read.csv("~/Downloads/bd_pre_pos.csv",
sep = ",",
header = T)
disf_eret_nopac <-
read.csv("~/Downloads/bd_pre_pos_nopac.csv",
sep = ",",
header = T)
View(disf_eret_nopac)
#Criar variável para comparar duas colunas de interesse
x2 = table(disf_eret$Grupo, disf_eret$IIEF_grav_2)
x2
#Qui-quadrado
chisq.test(x2)
#valor p direto do qui-quadraro
chisq.test(x2)$p.value
##segundo método resumo dos dados
summary(x2)
###
library(corrplot)
View(bd_pre_pos)
corrplot(corr, method ='number')
library(corrplot)
corrplot(corr, method ='number')
corrplot(disf_eret, method ='number')
corrplot(corr = disf_eret, method ='number')
corrplot(corr = disf_eret_nopac, method ='number')
correlation = disf_eret.corr()
correlation = disf_eret_nopac.corr()
disf_eret <-
read.csv("~/Downloads/bd_pre_pos.csv",
sep = ",",
header = T)
disf_eret_nopac <-
read.csv("~/Downloads/bd_pre_pos_nopac.csv",
sep = ",",
header = T)
View(disf_eret_nopac)
x2 = table(disf_eret$Grupo, disf_eret$IIEF_grav_2)
x2
disf_eret <-
read.csv("~/Downloads/bd_pre_pos.csv",
sep = ",",
header = T)
x2 = table(disf_eret$Grupo, disf_eret$IIEF_grav_2)
x2
x2 = table(disf_eret_nopac$Grupo, disf_eret$IIEF_grav_2)
x2
correlation = disf_eret_nopac.corr()
corrplot(corr, method ='number')
reticulate::repl_python()
import numpy as np
import pandas as pd
import numpy as np
import pandas as pd
# To add a new cell, type '# %%'
# To add a new markdown cell, type '# %% [markdown]'
# %%
from IPython import get_ipython
# %% [markdown]
# <a href="https://colab.research.google.com/github/BragatteMAS/R_Factor8-9/blob/master/ML_Fator8_9.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a>
# %% [markdown]
# # Standard packages
# %%
#math libraries
import numpy as np
import pandas as pd
# %%
pd.__version__
# %%
#vis libraries
import seaborn as sns
import bokeh as bk
from IPython.display import Image
# %%
import plotly
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.offline as py
from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
get_ipython().run_line_magic('matplotlib', 'inline')
# %%
from google.colab import files
pd.set_option('display.max_columns', None)
# %%
#Save files
#!pip install psutil requests
import psutil
import plotly.io as pio
pio.orca.config;
# %%
#ML packages
##pip install tensorflow #old programm
## tensorflow-gpu==2.0.0-rc1 # update tensorflow2.0 GPU
get_ipython().system('pip install --upgrade tensorflow==2.0.0-rc1 # update tensorflow CPU')
# %%
import tensorflow as tf
layers = tf.keras.layers
# %%
get_ipython().system('pip install watermark')
# %%
import watermark
get_ipython().run_line_magic('load_ext', 'watermark')
# %%
get_ipython().run_line_magic('watermark', '-n -v -m -g -iv')
# %% [markdown]
# # ML
# %%
uploaded = files.upload()
# %%
F8 = pd.read_excel('F8.xlsx')#, header=1)
#pd.options.display.float_format = '{:,.4f}'.format
F8.head()
# %%
F8.info()
# %%
f8 = F8.T
f8.head()
# %%
f8.reset_index(inplace=True)
f8.head()
# %%
header = f8.iloc[0] #Create a new variable called 'header' from the first row of the dataset
header
# %%
f8 = f8.rename(columns = header) # Rename the dataframe's column values with the header variable
f8
# %%
f8 = f8.drop([0])
f8.head()
# %% [markdown]
# ## Evaluate dataset transforming the name of mutations into categorical information
# [Features_selection_ML](https://www.youtube.com/watch?v=4RGT2YRHERY&feature=em-uploademail)
# %%
x = f8.drop(['Mutações'], axis = 1) #Todos dados numéricos menos coluna com informação categorica (nomes das características físico-químicas)
y = f8['Mutações'] #somente info categorica
# %%
x
# %%
y
# %%
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import chi2
# %%
#features extraction
test = SelectKBest(chi2, k=4)
# %%
fit= test.fit(x,y)
# %%
fit.get_support(indices=True) #best characteristcs
# %%
features  = fit.transform(x) #Apply the learning
# %%
print(features)
# %%
cols = fit.get_support(indices = True)
f8.iloc[:,cols] #found columns with indices
# %% [markdown]
# F_classify
# %%
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import f_classif, mutual_info_classif
# %%
f_classif = SelectKBest(score_func=f_classif, k=4)
# %%
fit = f_classif.fit(x,y)
# %%
features = fit.transform(x)
# %%
print(features)
# %%
cols = fit.get_support(indices = True)
f8.iloc[:,cols] #found columns with indices
# %% [markdown]
# # `Profiling`
# %%
#Install Pandas profiling
get_ipython().system('pip install https://github.com/pandas-profiling/pandas-profiling/archive/master.zip')
# %%
#Import o ProfileReport
from pandas_profiling import ProfileReport
# %%
#Profile execution
profile =  ProfileReport(x, title='Relatório - Pandas Profiling for Factor8_9', html={'style':{'full_width':True}})
# %%
profile
# %%
#Saving report to disk
profile.to_file(output_file="Report_FActor8_9.html")
# %% [markdown]
# # `SweetViz`
#
# %%
get_ipython().system(' pip install sweetviz')
# %%
# importing sweetviz
import sweetviz as sv
#analyzing the dataset
advert_report = sv.analyze(df)
#display the report
advert_report.show_html('Advertising.html')
# %%
df1 = sv.compare(df[100:], df[:100])
df1.show_html('Compare.html')
# %% [markdown]
# [Ref](https://towardsdatascience.com/sweetviz-automated-eda-in-python-a97e4cabacde)
#
# %% [markdown]
# # [ML Pratical examples to Images](https://medium.com/@cran2367/install-and-setup-tensorflow-2-0-2c4914b9a265)
# %% [markdown]
# ## ML Image CLassification
# %%
mnist = tf.keras.datasets.fashion_mnist
# %%
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0
# %%
class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']
plt.figure(figsize=(10,10))
for i in range(25):
plt.subplot(5,5,i+1)
plt.xticks([])
plt.yticks([])
plt.grid(False)
plt.imshow(x_train[i], cmap=plt.cm.binary)
plt.xlabel(class_names[y_train[i]])
plt.show()
# %%
model = tf.keras.Sequential()
model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense(10, activation='softmax'))
model.compile(optimizer='adam',
loss='sparse_categorical_crossentropy',
metrics=['accuracy'])
model.fit(x_train, y_train, epochs=5)
# %% [markdown]
# ## ML Validation for Image Classification
# %%
model.evaluate(x_test, y_test)
# %%
def plot_image(i, predictions_array, true_label, img):
predictions_array, true_label, img = predictions_array[i], true_label[i], img[i]
plt.grid(False)
plt.xticks([])
plt.yticks([])
plt.imshow(img, cmap=plt.cm.binary)
predicted_label = np.argmax(predictions_array)
if predicted_label == true_label:
color = 'blue'
else:
color = 'red'
plt.xlabel("{} {:2.0f}% ({})".format(class_names[predicted_label],
100*np.max(predictions_array),
class_names[true_label]),
color=color)
def plot_value_array(i, predictions_array, true_label):
predictions_array, true_label = predictions_array[i], true_label[i]
plt.grid(False)
plt.xticks([])
plt.yticks([])
thisplot = plt.bar(range(10), predictions_array, color="#777777")
plt.ylim([0, 1])
predicted_label = np.argmax(predictions_array)
thisplot[predicted_label].set_color('red')
thisplot[true_label].set_color('blue')
# %%
predictions = model.predict(x_test)
i = 0
plt.figure(figsize=(6,3))
plt.subplot(1,2,1)
plot_image(i, predictions, y_test, x_test)
plt.subplot(1,2,2)
plot_value_array(i, predictions, y_test)
plt.show()
# %%
predicted_label = class_names[np.argmax(predictions[0])]
print('Actual label:', class_names[y_test[0]])
print('Predicted label:', predicted_label)
# %%
# %% [markdown]
# # Correlations
#
# %%
correlation = x.corr()
# %%
plt.figure(figsize=(16,6))
sns.heatmap(x=correlation, annot=True)
# %%
F8.head()
# %%
f8t = F8.T
f8t.head()
# %%
x.head()
# %%
x.describe()
reticulate::repl_python()
olar = 'Hello Guille'
print(olar)
python --version
python --V
import pandas
import pandas as pd
$Py
olar = 'Hello Guille'
print(olar)
import pandas as pd
reticulate::repl_python()
knitr::opts_chunk$set(echo = TRUE)
reticulate::repl_python()
library(reticulate)
summary(cars)
plot(pressure)
reticulate::repl_python()
library(reticulate)
```{r setup, include=FALSE, echo = TRUE}
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
---
"PyR"
created by "Bragatte" 20210211
---
library(reticulate)
repl_python(
reticulate::py_config()
reticulate::py_config()
reticulate::py_config()
use_python("/usr/bin/python3", required=TRUE)
use_python("/usr/bin/python3", required=TRUE)
use_python("/usr/bin/python3.8", required=TRUE)
use_python("/usr/bin/python3.8", required=TRUE)
use_python("~/anaconda3/ens/dsz/bin/python", required=TRUE)
use_python("/anaconda3/ens/dsz/bin/python", required=TRUE)
use_python("~/anaconda3/envs/dsz/bin/python", required=TRUE)
use_python("/usr/bin/python3", required=TRUE)
library(reticulate)
repl_python()
repl_python()
reticulate::py_config()
use_python("/home/bragatte/anaconda3/envs/dsz/bin/python", required=TRUE)
python
pythonpy
reticulate::repl_python()
repl_python()
usethis::edit_r_profile()
usethis::edit_r_profile()
usethis::edit_r_profile()
packs = c("reticulate", "png")
lapply(packs, install.packages, character.only = TRUE)
lapply(packs, require, character.only = TRUE)
lapply(packs, require, character.only = TRUE)
repl_python()
import pandas as pd
python
reticulate::py_config()
repl_python()
#check py version
reticulate::py_config()
reticulate::repl_python()
reticulate::repl_python()
