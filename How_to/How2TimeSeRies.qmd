---
title: "How2TimeSeRies"
author: BragatteMAS
format: html
editor: visual
---

## **Creating Time Series in R with the ts() Function**

Time series analysis is a powerful tool in the hands of a data scientist or analyst. It allows us to uncover patterns, trends, and insights hidden within temporal data. In this blog post, we'll explore how to create a time series in R using the base R function `ts()`. The `ts()` function in R is a fundamental tool for handling time series data. It takes four main arguments:

1.  **data:** A vector or matrix of time series values.
2.  **start:** The time of the first observation.
3.  **end:** The time of the last observation.
4.  **frequency:** The number of observations per unit of time.

Let's dive into a practical example. Suppose we have a vector `sales` representing monthly sales data for a year. We can create a time series object using the `ts()` function as follows:

```{r}
# Sample data
sales <-
  c(120, 150, 200, 180, 250, 300, 280, 320, 400, 350, 300, 380)
# Creating a time series
sales_ts <- ts(
  data = sales,
  start = c(2022, 1),
  end = c(2022, 12),
  frequency = 12
)
# Display the time series
print(sales_ts)
```

```{r}
plot(sales_ts)
```

![](https://i0.wp.com/www.spsanderson.com/steveondata/posts/2023-12-27/index_files/figure-html/unnamed-chunk-1-1.png?w=450&ssl=1)

This example creates a monthly time series for sales data throughout the year 2022.

## Try it out!

Creating time series in R is a hands-on task. I encourage you to pick a dataset relevant to your interests or work and follow the same steps. You can use various time frequencies (e.g., daily, weekly, monthly) depending on your data.

## Bonus: Using `convert\_to\_ts()` from TidyDensity

Now, let's explore a bonus section discussing the `convert\_to\_ts()` function from TidyDensity. This function is designed to convert data in a data frame or tibble into a time series format. It works seamlessly with data generated from tidy_distribution functions.

## `convert\_to\_ts()` Function Details

The `convert\_to\_ts()` function takes the following arguments:

-   **.data:** A data frame or tibble to be converted into a time series format.
-   **.return_ts:** A logical value indicating whether to return the time series data. Default is TRUE.
-   **.pivot_longer:** A logical value indicating whether to pivot the data into long format. Default is FALSE.

## How It Works

1.  The function checks if the input is a data frame or tibble; otherwise, it raises an error.
2.  It verifies if the data comes from a tidy_distribution function; otherwise, it raises an error.
3.  The data is then converted into a time series format, grouping it by "sim_number" and transforming the "y" column into a time series.

## Example Usage

```{r}
library(TidyDensity)
# Assuming you have a tidy data frame 'tidy_data'
tidy_time_series <- convert_to_ts(.data = tidy_normal(),
                                  .return_ts = TRUE,
                                  .pivot_longer = FALSE)
# Display the result
head(tidy_time_series)
```

![](https://i0.wp.com/www.spsanderson.com/steveondata/posts/2023-12-27/index_files/figure-html/unnamed-chunk-2-1.png?w=450&ssl=1)

```{r}
plot(tidy_time_series)
```

![](https://i0.wp.com/www.spsanderson.com/steveondata/posts/2023-12-27/index_files/figure-html/unnamed-chunk-2-2.png?w=450&ssl=1)

```{r}
multiple_simulations_series <-
  convert_to_ts(
    .data = tidy_normal(.num_sims = 10),
    .return_ts = TRUE,
    .pivot_longer = TRUE
  )
head(multiple_simulations_series)
```

```{r}
plot(multiple_simulations_series)
```

```{r}
convert_to_ts(
  .data = tidy_normal(.num_sims = 10),
  .return_ts = FALSE,
  .pivot_longer = FALSE
)
```

```{r}
convert_to_ts(.data = tidy_normal(.num_sims = 10),
              .pivot_longer = TRUE)
```

This example showcases how to leverage TidyDensity's functionality to convert tidy data into a time series format effortlessly. At this point in time though, the parameters of the `ts()` function are not utilized, meaning you cannot also pass in a start, end or frequency, but that will be added in the future.

In conclusion, mastering the `ts()` function in base R and exploring additional tools like `convert\_to\_ts()` opens up new avenues for time series analysis. So, roll up your sleeves, experiment with your data, and unlock the insights hidden in the temporal dimension. Happy coding!

# Ref

[Creating Time Series in R with the ts() Function \| R-bloggers](https://www.r-bloggers.com/2023/12/creating-time-series-in-r-with-the-ts-function/?utm_source=phpList&utm_medium=email&utm_campaign=R-bloggers-weekly&utm_content=HTML)
