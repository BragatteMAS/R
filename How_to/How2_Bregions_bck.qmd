----
title: "BR regions"
author: "@BragatteMAS"
format: html
editor: source
---

# Brazil Regions
```{r setup, include=FALSE}
knitr::opts_chunk$set(
  echo = TRUE,
  collapse = TRUE,
  error = FALSE,
  warning = FALSE,
  message = FALSE,
  #cache = TRUE,
  fig.align = "center",
  results = 'asis'
)
```

### libs
```{r}
## delete memory data
rm(list = ls())
```

```{r}
library(pacman)
pacman::p_load(geobr, sf, tidytable, ggplot2, janitor, dplyr)
```


```{r}
#| collapse = FALSE
## add libraries of interest
packs <-
  c(
    "geobr",      ## maps & shape files
    "sf",         ## plot maps
    "tidytable",  ## manipular dados
    "ggplot2",    ## gráficos
    "dplyr",      ## merge
    "janitor"     ## clean data
    )
## install packages if not installed and load libs
if (!require(packs))
  lapply(packs, install.packages, character.only = FALSE)
lapply(packs, require, character.only = TRUE
)
```

### data
```{r}
br.states <- geobr::read_state(code_state ="all",year=2020 )
br.region <- geobr::read_region(2020)
```
#### Create DF of tests
```{r}
dados_testes <- as_tidytable(read.csv("~/Downloads/20/resp20/data/tests_2022.csv"))
```

#### Add number of test in 2022 Br
```{r}
dados_mapa <- left_join(br.states, dados_testes, by = c("abbrev_state" = "abbrev_state")) %>% 
  clean_names()
```


#### Manipulate dataset for translation region names
```{r}
# Define a lookup table that maps Portuguese names to English equivalents
translation_table <-
  data.frame(
    from = c("Norte", "Nordeste", "Centro Oeste", "Sudeste", "Sul"),
    to = c("North", "Northeast", "Midwest", "Southeast", "South")
  )

# Replace the region names with their English equivalents
br.region$name_region <-
  translation_table$to[match(br.region$name_region, translation_table$from)]

br.states$name_region <-
  translation_table$to[match(br.states$name_region, translation_table$from)]
```

### plot only states
```{r}
bra <-
  ggplot(br.states) +
  geom_sf(aes(fill = name_region)) +
  geom_sf_label(aes(label = abbrev_state),
                label.padding = unit(0.5, "mm"),
                size = 2) +
  xlab("Longitude") +
  ylab("Latitude") +
  labs(fill = "Region",
       title = "Brazilian regions and states")
bra
```
#### Plot states and tests
```{r}
# Definir paleta de cores
pal <- colorRampPalette(c("white", "red"))

# Criar gradiente de cor
dados_mapa$grad <- cut(dados_mapa$numero_de_testes_por_estado, breaks = 10)
daods_mapa$fill <- pal(length(levels(dados_mapa$grad)))[as.integer(dados_mapa$grad)]
```

```{r}

# Criar mapa
braT <- ggplot() +
  geom_sf(data = dados_mapa, aes(fill = fill), color = "gray70") +
  geom_sf_label(data = dados_mapa, aes(label = paste(abbrev_state, numero_de_testes_por_estado)), 
                label.padding = unit(0.5, "mm"), size = 2) +
  scale_fill_identity() +
  xlab("Longitude") +
  ylab("Latitude") +
  labs(fill = "Number of tests",
       title = "Brazilian states by number of tests") +
  theme_void() +
  theme(panel.background = element_rect(fill = "white", color = NA))

# Exibir mapa
braT
```


```{r}
# agrupar dados por região e somar o número de testes
dados_bar <- dados_mapa %>% 
  group_by(regiao) %>%
  summarise(num_testes = sum(numero_de_testes_por_estado))
```

```{r}
# plotar gráfico de barras horizontais com o número de testes por região
ggplot(dados_bar, aes(x = reorder(regiao, num_testes), y = num_testes, fill = factor(regiao))) +
  geom_bar(stat = "identity", show.legend = FALSE) +
  xlab("Número de Testes") +
  ylab("Região") +
  labs(title = "Número de testes por região") +
  theme_minimal() +
  theme(axis.line.y = element_blank(),
        axis.text.y = element_text(size = 10, hjust = 1),
        axis.ticks.y = element_blank(),
        plot.title = element_text(hjust = 0.5),
        panel.grid.major.x = element_line(color = "gray90"),
        panel.grid.minor.x = element_line(color = "gray90"),
        panel.grid.major.y = element_blank()) +
#  geom_text(aes(x = num_testes, y = reorder(regiao, num_testes), label = num_testes),
#            hjust = -0.1, size = 3) +
  scale_y_continuous(labels = scales::comma)
```


```{r}
#tibble::as.tibble(br.states)
tibble::as.tibble(dados_mapa)
```
```{r}
glimpse(dados_mapa)
```



```{r}
br_supp_t <- br.states |> 
    select(-c(code_state, abbrev_state, code_region, 'geom')) |> 
    pivot_wider(
    names_from = 'name_region',
    values_from = 'name_state',
    values_fn = list('name_state' = unique)
  )
```

### Creating a new table for supplementary material
```{r}
br_supp_a <- br.states |> 
  pivot_wider(names_from = 'name_region', values_from = 'name_state', 
              values_fn = list(name_state = unique)) |> 
  select(-c(code_state, abbrev_state, code_region, geom))
```


```{r}
library(tidyverse)
library(gt)

br.states %>%
  select(name_state, name_region) %>%
  pivot_longer(cols = -name_region, names_to = "state_type") %>%
  gt()
```