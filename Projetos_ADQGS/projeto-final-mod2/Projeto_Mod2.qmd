---
title: "projeto_final_mod2"
author: "nome aqui"
format: html
editor: visual
---

# Projeto de vigilância Mod2

## **Porque** desta atividade?

Praticar as habilidades ensinadas no curso em projeto com dados reais de pesquisa na área de saúde, neste exemplo com dados do SUS - **SIM** (Sistema de Informações de Mortalidade).

Nesta pesquisa queremos averiguar as associações dos dados de vigilância ... na coorte de indivíduos da população brasileira.

## Como

Seguir as instruções abaixo:

-   Cada discente deverá fazer de um mês diferente as análises, você precisa **seguir o tutorial e modificar o filtro para o mês que esta atribuído a você !!!!!!!!!!!!!!!!!!**

-   **Criar um projeto no Rstudio**, contendo o script e arquivo de dados do exercício com seu nome *e*

-   **Fazer um script/quarto** realizando as tarefas abaixo

    -   devem copiar e colar, editando partes de interesse pessoal

### Configurações do Projeto

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, collapse = TRUE, error = FALSE, warning = FALSE, message = FALSE, results = 'asis')
```

#### Definir local projeto

Salvar local onde terão os arquivos para meu projeto usar

Onde estou?

```{r}
getwd()
```

##### **Definir NOME DA PASTA DO SEU COMPUTADOR AQUI (pode copiar a de cima mostrado com \`getwd\` se o lugar estiver ok para você)**

Onde quero trabalhar com os arquivos no computador?

```{r}
pasta_proj_mod2 <-"~/Documents/GitHub/R/Projetos_ADQGS/projeto-final-mod2/"
```

Definir local para buscar os dados

```{r}
setwd(pasta_proj_mod2)
```

## Mãos a obra - parte técnica

### Instalar e carregar pacotes

Para garantir e facilitar o processo, vamos instalar no Rstudio o pacote `pacman` que instala e carrega automaticamente os demais pacotes e suas bibliotecas.

```{r}
## Bibliotecas
pacman::p_load(devtools, microdatasus, vroom, tidyverse,tidytable, plotly, sciplot, rcompanion, ggpubr, epitools)
```

```{r}
## caso pacote microdatasus falhe na instalação anterior, descomentar linha abaixo
# devtools::install_github("rfsaldanha/microdatasus", force = T)
```

### **O que** podemos fazer com os dados do SUS ?

Realizar transformações versáteis que facilitam análises de dados para diferentes estudos:

-   Manipulação

-   Exemplos de análises possíveis com os dados do SUS:

    -   Descritivas

    -   Temporias

    -   Espaciais

    -   Clusters

    -   Fatores de Risco\
        (Risco Relativo e Razão de Chances em coortes e casos-controles)

    -   Modelagens de doenças infecciosas

-   Em resumo as análises devem conter:

    -   PESSOA

    -   TEMPO

    -   LOCAL

### Dados SUS exemplo

##### SIM

```{r}
ES_Sim <- fetch_datasus(year_start = 2020, year_end = 2023, uf = "ES", information_system = "SIM-DO")
ESpecial_SIM <- process_sim(ES_Sim)
```

##### SINAN-Dengue

```{r}
ES_Sinan <- fetch_datasus(year_start = 2022, year_end = 2023, uf = "ES", information_system = "SINAN-DENGUE")
```

### Manipulando os dados

```{r}
## qual novo nome 
mortES <-
    ## qual arquivo original
    ES_Sim |>     
    ## quais colunas eu quero
    select(TIPOBITO, DTOBITO, DTNASC, IDADE, SEXO, RACACOR, ESTCIV, ESC, CAUSABAS) |>
    ## quais filtros quero aplicar
    filter(TIPOBITO == "2") |> 
    filter(between(as.Date(DTOBITO, format = "%d%m%Y"), as.Date("2020-01-01"), as.Date("2021-12-31")))



## substituindo valores NA por 0
mortES <- mutate_all(mortES, ~ ifelse(is.na(.), 0, .))
```

### Clusterização de variáveis

```{r}
## Lembrando como limpar o dataset, substituir NAs por 0 em todas as colunas
## existem várias formas de fazer isso, normalmente a forma drástica que deixa somente as colunas completas não serve para dados do SUS, por isso de fazermos uma seleção de colunas de interesse para aplicar esta abordagem
arvore_sinam0 <- ES_Sinan[complete.cases(ES_Sinan), ]
```

```{r}
## Criar a árvore de decisão
### Estamos tentando prever a variável "diabetes" com base nas outras variáveis
arvorESinam <- rpart( ~ ., data = mortES)

## Imprimir a árvore de decisão
### Esta função mostra o resultado da árvore de decisão como texto
printcp(arvorESinam)

## Plotar a árvore de decisão com rpart.plot
### Esta função cria uma visualização básica da árvore de decisão
rpart.plot(
  arvorESinam,
  yesno = 2,
  fallen.leaves = TRUE,
  type = 4,
  extra = 101
)
```

```{r}
## Instalar e carregar a biblioteca
pacman::p_load(rpart.plot)
## Plotar a árvore de decisão usando rpart.plot
rpart.plot(arvore, type=4, extra=101)
```

\###########

**Colocar um parágrafo de conclusão no seu relatório**, usando seus dados, com as correlações, ou regressões ou valor-p.\
Não estamos esperando um modelo de resposta ideal, o objetivo é vocês praticarem o método científico e aplicar os aprendizados no R, gerando um relatório ao final (no RStudio clicar no botão Render).

Devem usar este arquivo como referência.\
\
Entregar o arquivo com seu script "script_projeto_Maria", chamando os dados com seu Maria.csv, por exemplo. Aproveitem as 'dicas das aulas' que dão as referências para os exercícios.\
\
Bom trabalho e semana.\

## Ref

-   [Transferência de Arquivos -- DATASUS](https://datasus.saude.gov.br/transferencia-de-arquivos/#)

-   [rfsaldanha/microdatasus: Download de dados do DataSUS e pré-processamento no R.](https://github.com/rfsaldanha/microdatasus)

## Extras

### HackDATASUS

```{r}
hack_datasus <- function(sistema, modalidade, tipo_arquivo, ano, UF, mes){
  
  #Função gera dataframe a partir de ftp feita na página do datasus
  
  #sistema ex:'SIHSUS' Verificar os sistemas disponíveis em http://www2.datasus.gov.br/DATASUS/index.php?area=0901&item=1
  #modalidade  'dados'
  #tipo_arquivo ex: 'RD'#Varia conforme o sistema
  #ano ex: 17 Dois últimos dígitos do ano 
  #UF ex:'AL' Sigla de UF Brasileira
  #mes ex:'12' strings entre 01 e 12
  
  
  dest_file<- paste0(tipo_arquivo,UF,ano,mes,".dbc")
  str_download <- paste0("ftp://ftp.datasus.gov.br/dissemin/publicos/",sistema,"/","200801","_/",modalidade,"/",tipo_arquivo,UF,ano,mes,".dbc")
  download.file(str_download,destfile = dest_file, mode='wb')
  library(read.dbc)
  datasus<- read.dbc(dest_file)
  
  
}

sistema <- 'SIASUS' #Verificar os sistemas disponíveis em http://www2.datasus.gov.br/DATASUS/index.php?area=0901&item=1
modalidade <- 'dados'
tipo_arquivo<- 'ACF'#Varia conforme o sistema
ano <- 22 #Dois últimos dígitos do ano 
UF <- 'ES' #Siglas das UFs Brasileiras
mes<- '01' #strings entre 01 e 12


#Carrega em df_datasus os dados relativos à base de dados montada a partir dos parãmetros
df_datasus<- hack_datasus(sistema, modalidade, tipo_arquivo, ano, UF, mes)
```
